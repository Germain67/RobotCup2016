                                                          #define LEFT 0
#define RIGHT 1
#define FORWARD 2
#define BACKWARD 3
#define SPEED 100

#define FORWARD_SPEED 100
#define BACKWARD_SPEED 70
#define TURNING_SPEED 70

#define COLLECTOR_FWD_SPEED 100
#define COLLECTOR_REV_SPEED 50

#define WHITE 35
#define BLACK 25

#define WATCHING_DISTANCE 40

bool end = false;
int elapsedTime = 0;
mutex moveMutex;
mutex beepMutex;
bool doBeep=false;

void InitLightSensor(){
  SetSensorLight(IN_3);
}

void InitUltraSonicSensor(){
  SetSensorLowspeed(IN_4);
}

void InitBumpers(){
  SetSensorTouch(IN_1);
  SetSensorTouch(IN_2);
}

void displayLightSensorValue(){
  TextOut(10,LCD_LINE1,"LightSensor value : ");
  TextOut(10,LCD_LINE2,NumToStr(Sensor(IN_3)));
}

void displayUltraSonicSensorValue(){
  TextOut(10,LCD_LINE1,"UltraSonic value : ");
  TextOut(10,LCD_LINE2,NumToStr(SensorUS(IN_4)));
}

void StopRobot(){
   Off(OUT_AC);
}

void Beep(){
  PlayTone(1000,1000);
  Wait(1000);
}

void specialBeep(){
  PlayTone(1500,1000);
  Wait(1000);
  PlayTone(2000,1000);
  Wait(1000);
  PlayTone(2500,1000);
  Wait(1000);
}

void move(int direction, int delay, int power){
     if(direction == LEFT){
       OnFwd(OUT_C, power);
       OnRev(OUT_A, power);
     }
     else if(direction == RIGHT)
     {
       OnFwd(OUT_A, power);
       OnRev(OUT_C, power);
     }
     else if(direction == FORWARD)
     {
       OnFwd(OUT_AC, power);
     }
     else if(direction == BACKWARD)
     {
       OnRev(OUT_AC, power);
     }
     Wait(delay);
     StopRobot();
}

task collectGems(){
  while(!end){
    OnFwd(OUT_B, COLLECTOR_FWD_SPEED);
    Wait(2000);
    OnRev(OUT_B, COLLECTOR_REV_SPEED);
    Wait(1000);
  }
}

void finishProgram(){
  specialBeep();
  end = true;
}

int randomDirection(){
  int r = Random(2);
  if(r==0){
    return LEFT;
  }
  else{
    return RIGHT;
  }
}

task routine(){
 while(!end){
    //Check for obstacle
    if(SensorUS(IN_4) < WATCHING_DISTANCE)
    {
      Acquire(moveMutex);
      StopRobot();
      Acquire(beepMutex);
      doBeep=true;
      Release(beepMutex);
      move(randomDirection(), 1000, TURNING_SPEED);
      Release(moveMutex);
    }
    //Bump into obstacle
    if(SENSOR_1 == 1){
      Acquire(moveMutex);
      StopRobot();
      Acquire(beepMutex);
      doBeep=true;
      Release(beepMutex);
      move(BACKWARD, 1000, BACKWARD_SPEED);
      move(RIGHT, 1000, TURNING_SPEED);
      Release(moveMutex);
    }

    if(SENSOR_2 == 1){
      Acquire(moveMutex);
      StopRobot();
      Acquire(beepMutex);
      doBeep=true;
      Release(beepMutex);
      move(BACKWARD, 1000, BACKWARD_SPEED);
      move(LEFT, 1000, TURNING_SPEED);
      Release(moveMutex);
    }
    //Check for boundary
    if(Sensor(IN_3) > WHITE){
      Acquire(moveMutex);
      StopRobot();
      Acquire(beepMutex);
      doBeep=true;
      Release(beepMutex);
      move(BACKWARD, 1000, BACKWARD_SPEED);
      move(RIGHT, 2000, SPEED);
      Release(moveMutex);
    }
    //Check for black zone
    if(Sensor(IN_3) < BLACK && elapsedTime > 120){
      Acquire(moveMutex);
      StopRobot();
      move(FORWARD, 500 , FORWARD_SPEED);
      finishProgram();
      Release(moveMutex);
    }
  }
}

task goForward(){
  //Move
  while(!end){
    Acquire(moveMutex);
    Release(moveMutex);
    move(FORWARD, 1000 , FORWARD_SPEED);

  }
}

task displayTime(){
  while(!end){
    TextOut(10,LCD_LINE1,"Time : ");
    TextOut(10,LCD_LINE2,NumToStr(elapsedTime));
    Wait(1000);
    elapsedTime++;
  }
}

void initialize(){
  InitBumpers();
  InitUltraSonicSensor();
  InitLightSensor();
}

task music (){
  PlayFileEx("pacman_beginnin.rso",7,FALSE);
  Wait(5000);
  while(!end)
  {
     Acquire(beepMutex);
     if (doBeep)
     {
          doBeep=false;
          Beep();
     }
     Release(beepMutex);
     Wait(500);
  }
}

task main(){
  initialize();
  Precedes(music, routine, collectGems, goForward, displayTime);
}
