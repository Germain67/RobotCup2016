#define LEFT 0
#define RIGHT 1
#define FORWARD 2
#define BACKWARD 3

#define FORWARD_SPEED 100
#define BACKWARD_SPEED 100
#define TURNING_SPEED 100

#define COLLECTOR_FWD_SPEED 100
#define COLLECTOR_REV_SPEED 50

#define WHITE 45
#define BLACK 25

#define WATCHING_DISTANCE 40

mutex moveMutex;

/*
  Debugging purpose only
*/

void displayLightSensorValue(){
  TextOut(10,LCD_LINE1,"LightSensor value : ");
  TextOut(10,LCD_LINE2,NumToStr(Sensor(IN_3)));
}

void displayUltraSonicSensorValue(){
  TextOut(10,LCD_LINE1,"UltraSonic value : ");
  TextOut(10,LCD_LINE2,NumToStr(SensorUS(IN_4)));
}

/*
  Core functions
*/

task Beep(){
  PlayTone(1000,1000);
  Wait(1000);
}

void move(int direction, int delay, int power){
     if(direction == LEFT){
       OnFwd(OUT_C, power);
       OnRev(OUT_A, power);
     }
     else if(direction == RIGHT)
     {
       OnFwd(OUT_A, power);
       OnRev(OUT_C, power);
     }
     else if(direction == FORWARD)
     {
       OnFwd(OUT_AC, power);
     }
     else if(direction == BACKWARD)
     {
       OnRev(OUT_AC, power);
     }
     Wait(delay);
     Off(OUT_AC);
}

int randomDirection(){
  int r = Random(2);
  if(r==0){
    return LEFT;
  }
  else{
    return RIGHT;
  }
}

/*
  Routines
*/

task collectGems(){
  while(true){
    OnFwd(OUT_B, COLLECTOR_FWD_SPEED);
    Wait(2000);
    OnRev(OUT_B, COLLECTOR_REV_SPEED);
    Wait(1000);
  }
}

task routine(){
 while(true){
   //Check for black area
   if(Sensor(IN_3) < BLACK){
      Acquire(moveMutex);
      StartTask(Beep);
      Off(OUT_AC);
      move(FORWARD, 500 , FORWARD_SPEED);
      StopAllTasks();
      Release(moveMutex);
   }
   //Check for white boundary
   if(Sensor(IN_3) > WHITE){
      Acquire(moveMutex);
      StartTask(Beep);
      Off(OUT_AC);
      move(randomDirection(), 1500, TURNING_SPEED);
      Release(moveMutex);
    }

    //Bump into obstacle
    if(SENSOR_1 == 1){
      Acquire(moveMutex);
      StartTask(Beep);
      Off(OUT_AC);
      move(BACKWARD, 1000, BACKWARD_SPEED);
      move(RIGHT, 1500, TURNING_SPEED);
      Release(moveMutex);
    }

    if(SENSOR_2 == 2){
      Acquire(moveMutex);
      StartTask(Beep);
      Off(OUT_AC);
      move(BACKWARD, 1000, BACKWARD_SPEED);
      move(LEFT, 1500, TURNING_SPEED);
      Release(moveMutex);
    }
    //Check for obstacle
    if(SensorUS(IN_4) < WATCHING_DISTANCE)
    {
      Acquire(moveMutex);
      StartTask(Beep);
      Off(OUT_AC);
      move(randomDirection(), 2000, TURNING_SPEED);
      Release(moveMutex);
    }

  }
}

task goForward(){
  while(true){
    Acquire(moveMutex);
    Release(moveMutex);
    move(FORWARD, 1000 , FORWARD_SPEED);
  }
}

/*
  Starting functions
*/

task playPacmanBeginning(){
  PlayFileEx("pacman_beginnin.rso",7,FALSE);
  Wait(5000);
}

void initSensors(){
  SetSensorTouch(IN_1);
  SetSensorTouch(IN_2);
  SetSensorLight(IN_3);
  SetSensorLowspeed(IN_4);
}

task main(){
  initSensors();
  Precedes(playPacmanBeginning, routine, collectGems, goForward);
}
